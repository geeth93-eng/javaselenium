1. XPath Syntaxes
1.1 Find by Tag Name
//tagname

1.2 Find by Attribute
//tagname[@attribute='value']

1.3 Contains Function -----(partial attribute value)
//tagname[contains(@attribute, 'value')]

1.4 Text Function
//tagname[text()='text_value']


1.5 Contains Text -----(partial text)
//tagname[contains(text(), 'text_value')]

1.6 Starts-with Function
//tagname[starts-with(@attribute, 'value')]

1.7 And / Or Operator
//tagname[@attribute1='value1' and @attribute2='value2']
//tagname[@attribute1='value1' or @attribute2='value2']

1.8 Index
//tagname[index]

1.9 Parent-Child Relationship
//parent_tag/child_tag
or
//parent_tag/child_tag 


ðŸ”Ÿ Following-Sibling Axis
Selects a sibling that comes after a specific element.
//label[text()='Username']/following-sibling::input

ðŸ”Ÿ.1 Preceding-Sibling Axis
Selects a sibling that comes before a specific element.

xpath
Copy
Edit
//input[@id='username']/preceding-sibling::label
ðŸ”Ÿ.2 Parent Axis
Selects the parent of a node.

xpath
Copy
Edit
//input[@id='email']/parent::div
ðŸ”Ÿ.3 Ancestor Axis
Selects any ancestor (parent, grandparent, etc.) of a node.

xpath
Copy
Edit
//input[@id='email']/ancestor::form
ðŸ”Ÿ.4 Descendant Axis
Selects all descendants (children, grandchildren, etc.) of a node.

xpath
Copy
Edit
//div[@class='form-group']/descendant::input
ðŸ”Ÿ.5 Following Axis
Selects all nodes after the current node in the document.

xpath
Copy
Edit
//h2[text()='Login']/following::input
ðŸ”Ÿ.6 Preceding Axis
Selects all nodes before the current node in the document.

xpath
Copy
Edit
//input[@id='submit']/preceding::label
ðŸ”Ÿ.7 Using not() Function
To exclude an element with a certain attribute/value.

xpath
Copy
Edit
//input[not(@type='hidden')]
ðŸ”Ÿ.8 Wildcard Selector (*)
Selects any tag regardless of its name.

xpath
Copy
Edit
//*[@id='username']
ðŸ”Ÿ.9 Combining Multiple Functions
xpath
Copy
Edit
//input[contains(@id,'user') and not(@disabled)]
ðŸ”Ÿ.10 Position Filtering
xpath
Copy
Edit
(//input[@type='text'])[last()]
Gets the last matching input field.

ðŸŽ¯ Summary:
XPath Type	Use Case
following-sibling::	Select sibling after
preceding-sibling::	Select sibling before
parent::, ancestor::	Navigate up the tree
descendant::, child::	Navigate down the tree
not()	Exclude conditions
last(), position()	Index-based logic
*	Wildcard tag name



2. Sample Examples for Each Syntax
2.1 Find by Tag Name
//input
Selenium Example (Java):
WebElement inputElement = driver.findElement(By.xpath("//input"));

2.2 Find by Attribute
//input[@name='username']
Selenium Example (Java):
WebElement usernameField = driver.findElement(By.xpath("//input[@name='username']"));

2.3 Contains Function
//button[contains(@class, 'submit')]
Selenium Example (Java):
WebElement submitButton = driver.findElement(By.xpath("//button[contains(@class, 'submit')]"));

2.4 Text Function
//a[text()='Login']
Selenium Example (Java):
WebElement loginLink = driver.findElement(By.xpath("//a[text()='Login']"));

2.5 Contains Text
//h1[contains(text(), 'Welcome')]
Selenium Example (Java):
WebElement welcomeText = driver.findElement(By.xpath("//h1[contains(text(), 'Welcome')]"));

2.6 Starts-with Function
//input[starts-with(@id, 'search')]
Selenium Example (Java):
WebElement searchBox = driver.findElement(By.xpath("//input[starts-with(@id, 'search')]"));

2.7 And / Or Operator
//button[@class='btn' and @type='submit']
Selenium Example (Java):
WebElement submitButton = driver.findElement(By.xpath("//button[@class='btn' and @type='submit']"));
//button[@class='btn' or @type='submit']
Selenium Example (Java):
WebElement submitButton = driver.findElement(By.xpath("//button[@class='btn' or @type='submit']"));

2.8 Index
Edit
//button[2]
Selenium Example (Java):
WebElement secondButton = driver.findElement(By.xpath("//button[2]"));

2.9 Parent-Child Relationship
//div[@class='product']//span
Selenium Example (Java):
WebElement productSpan = driver.findElement(By.xpath("//div[@class='product']//span"));